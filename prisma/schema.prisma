// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id             String       @id @default(uuid())
  firstName      String
  lastName       String
  email          String       @unique
  phoneNumber    String       @unique
  idNumber       String
  password       String
  virtualBalance Float        @default(100)
  tokens         Token[]
  autoMobiles    AutoMobile[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum TokenType {
  PASSWORD_RESET
}

model Token {
  id                String    @id @default(uuid())
  hashedToken       String
  hashedTokenExpire BigInt
  name              TokenType @default(PASSWORD_RESET)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name])
  @@index([userId])
}

enum AutoMobileTypes {
  MINIVAN
  VEHICLE
  MICROCAR
  SEDAN
  HATCHBACK
  COUPE
  VAN
  HEV
  ELECTRIC_CAR
  CROSSOVER
}

model AutoMobile {
  id                          String            @id @default(uuid())
  name                        String
  vehicleIdentificationNumber String
  type                        AutoMobileTypes   @default(SEDAN)
  brand                       String            @db.Text
  modelYear                   String
  color                       String
  userId                      String
  user                        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  parkings                    ParkingInstance[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([userId, name])
  @@index([userId])
}

model Admin {
  id       String @id @default(uuid())
  uuid     String
  password String

  parkingZones ParkingZone[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model ParkingZone {
  id         String @id @default(uuid())
  name       String @unique
  address    String @db.Text
  hourlyCost Float

  addedById String
  addedBy   Admin             @relation(fields: [addedById], references: [id])
  parkings  ParkingInstance[]

  @@index([addedById])
}

model ParkingInstance {
  id String @id @default(uuid())

  automobileId String
  automobile   AutoMobile @relation(fields: [automobileId], references: [id], onDelete: Cascade)

  zoneId String
  zone   ParkingZone @relation(fields: [zoneId], references: [id], onDelete: Cascade)
  boughtHours Float
  expireDate BigInt
  isCanceled Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())

  @@index([automobileId])
  @@index([zoneId])
}

